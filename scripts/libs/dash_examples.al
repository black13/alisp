(import 'dash :all)

(dump (d-map-when (lambda (x) (== (mod x 2) 0)) (lambda (x) (* x 2)) '(1 2 3 4 5 6 7 8)))
(dump (d-map-first even? square '(1 2 3 4 5 6 7 8)))
(dump (d-map-last even? square '(1 2 3 4 5 6 7 8)))
(dump (d-map-indexed (lambda (index item) (- item index)) '(1 2 3 4))) ;; => '(1 1 1 1)
(dump (d-annotate square '(1 2 3))) ;; => '((2 . 1) (3 . 2) (4 . 3))
(dump (d-splice 'even? (lambda (x) (list x x)) '(1 2 3 4))) ;; => '(1 2 2 3 4 4)
(dump (d-splice-list even? '(a b c) '(1 2 3 4))) ;; => '(1 a b c 2)
(dump (d-mapcat (lambda (item) (list 0 item)) '(1 2 3))) ;; => '(0 1 0 2 0 3)
(dump (d-copy '(1 2 3))) ;; => '(1 2 3)
(dump (d-filter (lambda (num) (== 0 (mod num 2))) '(1 2 3 4))) ;; => '(2 4)
(dump (d-remove (lambda (num) (== 0 (mod num 2))) '(1 2 3 4))) ;; => '(2 4)
(dump (d-remove-first even? '(1 3 5 4 7 8 10))) ;; => '(1 3 5 7 8 10)
(dump (d-remove-last even? '(1 3 5 4 7 8 10))) ;; => '(1 3 5 7 8 10)
(dump (d-non-nil '(1 nil 2 nil nil 3 4 nil 5 nil))) ;; => '(1 2 3 4 5)
(dump (d-slice '(1 2 3 4 5) 1)) ;; => '(2 3 4 5)
(dump (d-slice '(1 2 3 4 5) 1 -2)) ;; => '(1 2 3)
(dump (d-slice '(1 2 3 4 5 6 7 8 9) 1 -1 2)) ;; => '(2 4 6 8)
(dump (d-take 3 '(1 2 3 4 5))) ;; => '(1 2 3)
(dump (d-take 17 '(1 2 3 4 5))) ;; => '(1 2 3 4 5)
(dump (d-take-last 3 '(1 2 3 4 5))) ;; => '(3 4 5)
(dump (d-take-last 17 '(1 2 3 4 5))) ;; => '(1 2 3 4 5)
(dump (d-take-last 1 '(1 2 3 4 5))) ;; => '(5)
(dump (d-drop 3 '(1 2 3 4 5))) ;; => '(4 5)
(dump (d-drop 17 '(1 2 3 4 5))) ;; => '()
(dump (d-drop-last 3 '(1 2 3 4 5))) ;; => '(1 2)
(dump (d-drop-last 17 '(1 2 3 4 5))) ;; => '()
(dump (d-take-while even? '(1 2 3 4))) ;; => '()
(dump (d-take-while even? '(2 4 5 6))) ;; => '(2 4)
(dump (d-drop-while even? '(1 2 3 4))) ;; => '(1 2 3 4)
(dump (d-drop-while even? '(2 4 5 6))) ;; => '(5 6)
(dump (d-select-by-indices '(4 10 2 3 6) '("v" "e" "l" "o" "c" "i" "r" "a" "p" "t" "o" "r"))) ;; => '("c" "o" "l" "o" "r")
(dump (d-select-by-indices '(2 1 0) '("a" "b" "c"))) ;; => '("c" "b" "a")
(dump (d-select-by-indices '(0 1 2 0 1 3 3 1) '("f" "a" "r" "l"))) ;; => '("f" "a" "r" "f" "a" "l" "l" "a")
(dump (d-select-columns '(0 2) '((1 2 3) (a b c) (:a :b :c)))) ;; => '((1 3) (a c) (:a :c))
(dump (d-select-columns '(1) '((1 2 3) (a b c) (:a :b :c)))) ;; => '((2) (b) (:b))
(dump (d-select-columns nil '((1 2 3) (a b c) (:a :b :c)))) ;; => '(nil nil nil)
(dump (d-select-column 1 '((1 2 3) (a b c) (:a :b :c)))) ;; => '(2 b :b)
(dump (d-keep (lambda (num) (when (> num 3) (* 10 num))) '(1 2 3 4 5 6))) ;; => '(40 50 60)
(dump (d-concat '(1))) ;; => '(1)
(dump (d-concat '(1) '(2))) ;; => '(1 2)
(dump (d-concat '(1) '(2 3) '(4))) ;; => '(1 2 3 4)
(dump (d-flatten '((1)))) ;; => '(1)
(dump (d-flatten '((1 (2 3) (((4 (5)))))))) ;; => '(1 2 3 4 5)
(dump (d-flatten '(1 2 (3 4)))) ;; => '(1 2 (3 . 4))
(dump (d-replace 1 "1" '(1 2 3 4 3 2 1))) ;; => '("1" 2 3 4 3 2 "1")
(dump (d-replace "foo" "bar" '("a" "nice" "foo" "sentence" "about" "foo"))) ;; => '("a" "nice" "bar" "sentence" "about" "bar")
(dump (d-replace 1 2 nil)) ;; => nil
(dump (d-replace-first 1 "1" '(1 2 3 4 3 2 1))) ;; => '("1" 2 3 4 3 2 1)
(dump (d-replace-first "foo" "bar" '("a" "nice" "foo" "sentence" "about" "foo"))) ;; => '("a" "nice" "bar" "sentence" "about" "foo")
(dump (d-replace-first 1 2 nil)) ;; => nil
(dump (d-replace-last 1 "1" '(1 2 3 4 3 2 1))) ;; => '(1 2 3 4 3 2 "1")
(dump (d-replace-last "foo" "bar" '("a" "nice" "foo" "sentence" "about" "foo"))) ;; => '("a" "nice" "foo" "sentence" "about" "bar")
(dump (d-replace-last 1 2 nil)) ;; => nil
(dump (d-insert-at 1 'x '(a b c))) ;; => '(a x b c)
(dump (d-insert-at 12 'x '(a b c))) ;; => '(a b c x)
(dump (d-replace-at 0 9 '(0 1 2 3 4 5))) ;; => '(9 1 2 3 4 5)
(dump (d-replace-at 1 9 '(0 1 2 3 4 5))) ;; => '(0 9 2 3 4 5)
(dump (d-replace-at 4 9 '(0 1 2 3 4 5))) ;; => '(0 1 2 3 9 5)
(dump (d-update-at 0 (lambda (x) (+ x 9)) '(0 1 2 3 4 5))) ;; => '(9 1 2 3 4 5)
(dump (d-update-at 1 (lambda (x) (+ x 8)) '(0 1 2 3 4 5))) ;; => '(0 9 2 3 4 5)
(dump (d-remove-at 0 '("0" "1" "2" "3" "4" "5"))) ;; => '("1" "2" "3" "4" "5")
(dump (d-remove-at 1 '("0" "1" "2" "3" "4" "5"))) ;; => '("0" "2" "3" "4" "5")
(dump (d-remove-at 2 '("0" "1" "2" "3" "4" "5"))) ;; => '("0" "1" "3" "4" "5")
(dump (d-remove-at-indices '(0) '("0" "1" "2" "3" "4" "5"))) ;; => '("1" "2" "3" "4" "5")
(dump (d-remove-at-indices '(0 2 4) '("0" "1" "2" "3" "4" "5"))) ;; => '("1" "3" "5")
(dump (d-remove-at-indices '(0 5) '("0" "1" "2" "3" "4" "5"))) ;; => '("1" "2" "3" "4")
(dump (d-iterate (lambda (x) (+ x x)) 2 5)) ;; => '(2 4 8 16 32)
(dump (d-unfold (lambda (x) (unless (== x 0) (list x (- x 1)))) 10)) ;; => '(10 9 8 7 6 5 4 3 2 1)
(dump (d-map (lambda (x) (* x 2))'(1 2 3 4 5)))
(dump (d-reduce-from '- 10 '(1 2 3))) ;; => 4
(dump (d-reduce-from '- 50 '(1 2 3))) ;; => 4
(dump (d-reduce-from '+ 0 '(1 2 3))) ;; => 4
(dump (d-reduce-r-from '- 10 '(1 2 3))) ;; => -8
(dump (d-reduce '- '(1 2 3 4))) ;; => -8
(dump (d-reduce 'list '(1 2 3 4))) ;; => '(((1 2) 3) 4)
(dump (d-reduce-r '- '(1 2 3 4))) ;; => -2
(dump (d-reductions-from 'max 0 '(2 1 4 3))) ;; => '(0 2 2 4 4)
(dump (d-reductions-from '* 1 '(1 2 3 4))) ;; => '(1 1 2 6 24)
(dump (d-reductions-r-from 'max 0 '(2 1 4 3))) ;; => '(4 4 4 3 0)
(dump (d-reductions-r-from '* 1 '(1 2 3 4))) ;; => '(24 24 12 4 1)
(dump (d-reductions '+ '(1 2 3 4))) ;; => '(1 3 6 10)
(dump (d-reductions '* '(1 2 3 4))) ;; => '(1 2 6 24)
(dump (d-reductions-r '+ '(1 2 3 4))) ;; => '(10 9 7 4)
(dump (d-reductions-r '* '(1 2 3 4))) ;; => '(24 24 12 4)
(dump (d-count even? '(1 2 3 4 5))) ;; => 2
(dump (d-sum '())) ;; => 0
(dump (d-sum '(1))) ;; => 1
(dump (d-sum '(1 2 3 4))) ;; => 10
(dump (d-running-sum '(1 2 3 4))) ;; => '(1 3 6 10)
(dump (d-running-sum '(1))) ;; => '(1)
(dump (d-running-sum '())) ;; Error
(dump (d-product '())) ;; => 1
(dump (d-product '(1))) ;; => 1
(dump (d-product '(1 2 3 4))) ;; => 24
(dump (d-running-product '(1 2 3 4))) ;; => '(1 2 6 24)
(dump (d-running-product '(1))) ;; => '(1)
(dump (d-running-product '())) ;; Error
(dump (d-inits '(1 2 3 4))) ;; => '(nil (1) (1 2) (1 2 3) (1 2 3 4))
(dump (d-inits nil)) ;; => '(nil)
(dump (d-inits '(1))) ;; => '(nil (1))
(dump (d-tails '(1 2 3 4))) ;; => '((1 2 3 4) (2 3 4) (3 4) (4) nil)
(dump (d-tails nil)) ;; => '(nil)
(dump (d-tails '(1))) ;; => '((1) nil)
(dump (d-common-prefix '(1))) ;; => '(1)
(dump (d-common-prefix '(1 2) '(3 4) '(1 2))) ;; => nil
(dump (d-common-prefix '(1 2) '(1 2 3) '(1 2 3 4))) ;; => '(1 2)
(dump (d-common-suffix '(1))) ;; => '(1)
(dump (d-common-suffix '(1 2) '(3 4) '(1 2))) ;; => nil
(dump (d-common-suffix '(1 2 3 4) '(2 3 4) '(3 4))) ;; => '(3 4)
(dump (d-min '(0))) ;; => 0
(dump (d-min '(3 2 1))) ;; => 1
(dump (d-min '(1 2 3))) ;; => 1
(dump (d-min-by '> '(4 3 6 1))) ;; => 1
(dump (d-max '(0))) ;; => 0
(dump (d-max '(3 2 1))) ;; => 3
(dump (d-max '(1 2 3))) ;; => 3
(dump (d-max-by '> '(4 3 6 1))) ;; => 6
(dump (d-any? even? '(1 2 3))) ;; => t
(dump (d-any? even? '(1 3 5))) ;; => nil
(dump (d-all? even? '(1 2 3))) ;; => nil
(dump (d-all? even? '(2 4 6))) ;; => t
(dump (d-none? even? '(1 2 3))) ;; => nil
(dump (d-none? even? '(1 3 5))) ;; => t
(dump (d-only-some? even? '(1 2 3))) ;; => t
(dump (d-only-some? even? '(1 3 5))) ;; => nil
(dump (d-only-some? even? '(2 4 6))) ;; => nil
(dump (d-contains? '(1 2 3) 1)) ;; => t
(dump (d-contains? '(1 2 3) 2)) ;; => t
(dump (d-contains? '(1 2 3) 4)) ;; => nil
(dump (d-same-items? '(1 2 3) '(1 2 3))) ;; => t
(dump (d-same-items? '(1 2 3) '(3 2 1))) ;; => t
(dump (d-same-items? '(1 2 3) '(1 2 3 4))) ;; => nil
(dump (d-is-prefix? '(1 2 3) '(1 2 3 4 5))) ;; => t
(dump (d-is-prefix? '(1 2 3 4 5) '(1 2 3))) ;; => nil
(dump (d-is-prefix? '(1 3) '(1 2 3 4 5))) ;; => nil
(dump (d-is-infix? '(1 2 3) '(1 2 3 4 5))) ;; => t
(dump (d-is-infix? '(2 3 4) '(1 2 3 4 5))) ;; => t
(dump (d-is-infix? '(3 4 5) '(1 2 3 4 5))) ;; => t
(dump (d-powerset '(x y z))) ;; => '((x y z) (x y) (x z) (x) (y z) (y) (z) nil)
(dump (d-permutations '(a b c))) ;; => '((a b c) (a c b) (b a c) (b c a) (c a b) (c b a))
(dump (d-split-at 3 '(1 2 3 4 5))) ;; => '((1 2 3) (4 5))
(dump (d-split-at 17 '(1 2 3 4 5))) ;; => '((1 2 3 4 5) nil)
(dump (d-split-with 'even? '(1 2 3 4))) ;; => '(nil (1 2 3 4))
(dump (d-split-with 'even? '(2 4 5 6))) ;; => '((2 4) (5 6))
(dump (d-split-on '| '(Nil | Leaf a | Node Tree a))) ;; => '((Nil) (Leaf a) (Node [Tree a]))
(dump (d-split-on ':endgroup '("a" "b" :endgroup "c" :endgroup "d" "e"))) ;; => '(("a" "b") ("c") ("d" "e"))
(dump (d-split-when 'even? '(1 2 3 4 5 6))) ;; => '((1) (3) (5))
(dump (d-split-when 'even? '(1 2 3 4 6 8 9))) ;; => '((1) (3) (9))
(dump (d-separate (lambda (num) (== 0 (mod num 2))) '(1 2 3 4 5 6 7))) ;; => '((2 4 6) (1 3 5 7))
(dump (d-partition 2 '(1 2 3 4 5 6))) ;; => '((1 2) (3 4) (5 6))
(dump (d-partition 2 '(1 2 3 4 5 6 7)))
(dump (d-partition 3 '(1 2 3 4 5 6 7))) ;; => '((1 2 3) (4 5 6))
(dump (d-partition-all 2 '(1 2 3 4 5 6))) ;; => '((1 2) (3 4) (5 6))
(dump (d-partition-all 2 '(1 2 3 4 5 6 7)))
(dump (d-partition-all 3 '(1 2 3 4 5 6 7))) ;; => '((1 2 3) (4 5 6))
(dump (d-partition-in-steps 2 1 '(1 2 3 4))) ;; => '((1 2) (2 3) (3 4))
(dump (d-partition-in-steps 3 2 '(1 2 3 4))) ;; => '((1 2 3))
(dump (d-partition-in-steps 3 2 '(1 2 3 4 5))) ;; => '((1 2 3) (3 4 5))
(dump (d-partition-all-in-steps 2 1 '(1 2 3 4))) ;; => '((1 2) (2 3) (3 4) (4))
(dump (d-partition-all-in-steps 3 2 '(1 2 3 4))) ;; => '((1 2 3) (3 4))
(dump (d-partition-all-in-steps 3 2 '(1 2 3 4 5))) ;; => '((1 2 3) (3 4 5) (5))
(dump (d-partition-by 'even? '())) ;; => '()
(dump (d-partition-by 'even? '(1 1 2 2 2 3 4 6 8))) ;; => '((1 1) (2 2 2) (3) (4 6 8))
(dump (d-partition-by-header 'even? '(2 1 1 1 4 1 3 5 6 6 1))) ;; => '((2 1 1 1) (4 1 3 5) (6 6 1))
(dump (d-group-by 'even? '(1 1 2 2 2 3 4 6 8))) ;; => '((nil 1 1 3) (t 2 2 2 4 6 8))
(dump (d-elem-indices 2 '(6 7 8 2 3 4 2 1))) ;; => '(3 6)
(dump (d-elem-indices "bar" '("foo" "bar" "baz"))) ;; => '(1)
(dump (d-elem-indices '(1 2) '((3) (1 2) (5 6) (1 2) nil))) ;; => '(1 3)
(dump (d-find-index 'odd? '(2 4 1 6 3 3 5 8))) ;; => 0
(dump (d-find-index 'even? '(2 4 1 6 3 3 5 8))) ;; => 0
(dump (d-find-indices 'even? '(2 4 1 6 3 3 5 8))) ;; => 7
(dump (d-find-last-index 'even? '(2 4 1 6 3 3 5 8))) ;; => 7
