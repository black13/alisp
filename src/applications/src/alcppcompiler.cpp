/*   Alisp - the alisp interpreted language
    Copyright (C) 2020 Stanislav Arnaudov

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any prior version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */

#include <iostream>
#include <string>
#include <fstream>
#include <filesystem>
#include <atomic>
#include <functional>
#include <signal.h>
#include <cstring>
#include <vector>
#include <unordered_map>
#include <string_view>

#include <clipp.hpp>
#include <fmt/format.h>

#include "alisp/config.hpp"
#include "alisp/utility.hpp"
#include "alisp/alisp/alisp_engine.hpp"
#include "alisp/utility/macros.hpp"
#include "alisp/alisp/alisp_macros.hpp"
#include "alisp/alisp/alisp_assertions.hpp"

using namespace alisp;
using namespace fmt::literals;
unsigned char templ_cpp[] = {
    0x2f, 0x2a, 0x20, 0x20, 0x20, 0x41, 0x6c, 0x69, 0x73, 0x70, 0x20, 0x2d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x6c,
    0x69, 0x73, 0x70, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x64, 0x20, 0x6c, 0x61, 0x6e,
    0x67, 0x75, 0x61, 0x67, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74,
    0x20, 0x28, 0x43, 0x29, 0x20, 0x32, 0x30, 0x32, 0x30, 0x20, 0x53, 0x74, 0x61, 0x6e, 0x69, 0x73, 0x6c, 0x61, 0x76,
    0x20, 0x41, 0x72, 0x6e, 0x61, 0x75, 0x64, 0x6f, 0x76, 0x0a, 0x0a, 0x54, 0x68, 0x69, 0x73, 0x20, 0x70, 0x72, 0x6f,
    0x67, 0x72, 0x61, 0x6d, 0x20, 0x69, 0x73, 0x20, 0x66, 0x72, 0x65, 0x65, 0x20, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61,
    0x72, 0x65, 0x3b, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x72, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72,
    0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x69, 0x74, 0x20, 0x61, 0x6e, 0x64, 0x2f, 0x6f, 0x72, 0x20, 0x6d, 0x6f, 0x64,
    0x69, 0x66, 0x79, 0x0a, 0x69, 0x74, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x65,
    0x72, 0x6d, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x47, 0x4e, 0x55, 0x20, 0x47, 0x65, 0x6e, 0x65,
    0x72, 0x61, 0x6c, 0x20, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x20,
    0x61, 0x73, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x20, 0x62, 0x79, 0x0a, 0x74, 0x68, 0x65,
    0x20, 0x46, 0x72, 0x65, 0x65, 0x20, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x20, 0x46, 0x6f, 0x75, 0x6e,
    0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x20, 0x65, 0x69, 0x74, 0x68, 0x65, 0x72, 0x20, 0x76, 0x65, 0x72, 0x73,
    0x69, 0x6f, 0x6e, 0x20, 0x32, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
    0x65, 0x2c, 0x20, 0x6f, 0x72, 0x0a, 0x28, 0x61, 0x74, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x6f, 0x70, 0x74, 0x69,
    0x6f, 0x6e, 0x29, 0x20, 0x61, 0x6e, 0x79, 0x20, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69,
    0x6f, 0x6e, 0x2e, 0x0a, 0x0a, 0x54, 0x68, 0x69, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x20, 0x69,
    0x73, 0x20, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68,
    0x65, 0x20, 0x68, 0x6f, 0x70, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x69, 0x74, 0x20, 0x77, 0x69, 0x6c, 0x6c,
    0x20, 0x62, 0x65, 0x20, 0x75, 0x73, 0x65, 0x66, 0x75, 0x6c, 0x2c, 0x0a, 0x62, 0x75, 0x74, 0x20, 0x57, 0x49, 0x54,
    0x48, 0x4f, 0x55, 0x54, 0x20, 0x41, 0x4e, 0x59, 0x20, 0x57, 0x41, 0x52, 0x52, 0x41, 0x4e, 0x54, 0x59, 0x3b, 0x20,
    0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6d,
    0x70, 0x6c, 0x69, 0x65, 0x64, 0x20, 0x77, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x0a, 0x4d,
    0x45, 0x52, 0x43, 0x48, 0x41, 0x4e, 0x54, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x20, 0x6f, 0x72, 0x20, 0x46,
    0x49, 0x54, 0x4e, 0x45, 0x53, 0x53, 0x20, 0x46, 0x4f, 0x52, 0x20, 0x41, 0x20, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43,
    0x55, 0x4c, 0x41, 0x52, 0x20, 0x50, 0x55, 0x52, 0x50, 0x4f, 0x53, 0x45, 0x2e, 0x20, 0x20, 0x53, 0x65, 0x65, 0x20,
    0x74, 0x68, 0x65, 0x0a, 0x47, 0x4e, 0x55, 0x20, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x20, 0x50, 0x75, 0x62,
    0x6c, 0x69, 0x63, 0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6d, 0x6f, 0x72,
    0x65, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x0a, 0x0a, 0x59, 0x6f, 0x75, 0x20, 0x73, 0x68, 0x6f,
    0x75, 0x6c, 0x64, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x61,
    0x20, 0x63, 0x6f, 0x70, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x47, 0x4e, 0x55, 0x20, 0x47, 0x65,
    0x6e, 0x65, 0x72, 0x61, 0x6c, 0x20, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
    0x65, 0x20, 0x61, 0x6c, 0x6f, 0x6e, 0x67, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x70,
    0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x3b, 0x20, 0x69, 0x66, 0x20, 0x6e, 0x6f, 0x74, 0x2c, 0x20, 0x77, 0x72, 0x69,
    0x74, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x46, 0x72, 0x65, 0x65, 0x20, 0x53, 0x6f, 0x66, 0x74,
    0x77, 0x61, 0x72, 0x65, 0x20, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x49, 0x6e,
    0x63, 0x2e, 0x2c, 0x0a, 0x35, 0x31, 0x20, 0x46, 0x72, 0x61, 0x6e, 0x6b, 0x6c, 0x69, 0x6e, 0x20, 0x53, 0x74, 0x72,
    0x65, 0x65, 0x74, 0x2c, 0x20, 0x46, 0x69, 0x66, 0x74, 0x68, 0x20, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x2c, 0x20, 0x42,
    0x6f, 0x73, 0x74, 0x6f, 0x6e, 0x2c, 0x20, 0x4d, 0x41, 0x20, 0x30, 0x32, 0x31, 0x31, 0x30, 0x2d, 0x31, 0x33, 0x30,
    0x31, 0x20, 0x55, 0x53, 0x41, 0x2e, 0x20, 0x2a, 0x2f, 0x0a, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
    0x20, 0x3c, 0x69, 0x6f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
    0x65, 0x20, 0x3c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
    0x20, 0x3c, 0x66, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
    0x20, 0x3c, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c,
    0x75, 0x64, 0x65, 0x20, 0x3c, 0x61, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75,
    0x64, 0x65, 0x20, 0x3c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x3e, 0x0a, 0x23, 0x69, 0x6e,
    0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x68, 0x3e, 0x0a, 0x23, 0x69,
    0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x63, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3e, 0x0a, 0x0a, 0x0a,
    0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x63, 0x6c, 0x69, 0x70, 0x70, 0x2e, 0x68, 0x70, 0x70,
    0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x66, 0x6d, 0x74, 0x2f, 0x66, 0x6f, 0x72,
    0x6d, 0x61, 0x74, 0x2e, 0x68, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x72, 0x61,
    0x6e, 0x67, 0x2e, 0x68, 0x70, 0x70, 0x3e, 0x0a, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x22,
    0x61, 0x6c, 0x69, 0x73, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x68, 0x70, 0x70, 0x22, 0x0a, 0x23,
    0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x22, 0x61, 0x6c, 0x69, 0x73, 0x70, 0x2f, 0x75, 0x74, 0x69, 0x6c,
    0x69, 0x74, 0x79, 0x2e, 0x68, 0x70, 0x70, 0x22, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x22,
    0x61, 0x6c, 0x69, 0x73, 0x70, 0x2f, 0x61, 0x6c, 0x69, 0x73, 0x70, 0x2f, 0x61, 0x6c, 0x69, 0x73, 0x70, 0x5f, 0x65,
    0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x68, 0x70, 0x70, 0x22, 0x0a, 0x0a, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x6e,
    0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x61, 0x6c, 0x69, 0x73, 0x70, 0x3b, 0x0a, 0x0a, 0x76, 0x6f,
    0x69, 0x64, 0x20, 0x67, 0x6f, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x28, 0x69, 0x6e, 0x74, 0x29, 0x0a,
    0x7b, 0x7d, 0x0a, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x69, 0x6e, 0x74, 0x20, 0x61,
    0x72, 0x67, 0x63, 0x2c, 0x20, 0x63, 0x68, 0x61, 0x72, 0x20, 0x2a, 0x61, 0x72, 0x67, 0x76, 0x5b, 0x5d, 0x29, 0x0a,
    0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
    0x63, 0x65, 0x20, 0x61, 0x6c, 0x69, 0x73, 0x70, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73,
    0x70, 0x61, 0x63, 0x65, 0x20, 0x66, 0x73, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x64, 0x3a, 0x3a, 0x66, 0x69, 0x6c, 0x65,
    0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6e,
    0x76, 0x3a, 0x3a, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x6d, 0x5f, 0x65, 0x6e,
    0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x70, 0x61, 0x72, 0x73,
    0x65, 0x72, 0x3a, 0x3a, 0x41, 0x4c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x3c, 0x65, 0x6e, 0x76, 0x3a, 0x3a, 0x45,
    0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x3e, 0x20, 0x6d, 0x5f, 0x70, 0x61, 0x72, 0x73, 0x65,
    0x72, 0x7b, 0x6d, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x7d, 0x3b, 0x0a, 0x20,
    0x20, 0x20, 0x20, 0x65, 0x76, 0x61, 0x6c, 0x3a, 0x3a, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x20,
    0x6d, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x28, 0x6d, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72,
    0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2c, 0x20, 0x26, 0x6d, 0x5f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x29, 0x3b,
    0x0a, 0x0a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x73, 0x74, 0x64, 0x3a, 0x3a, 0x73,
    0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x6d, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
    0x6f, 0x72, 0x79, 0x20, 0x3d, 0x20, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x3a, 0x3a, 0x65, 0x6e, 0x76, 0x5f,
    0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x28, 0x22, 0x48, 0x4f, 0x4d, 0x45, 0x22, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20,
    0x20, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x73, 0x74, 0x64, 0x3a, 0x3a, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x3c, 0x73,
    0x74, 0x64, 0x3a, 0x3a, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3e, 0x20, 0x61, 0x72, 0x67, 0x73, 0x7b, 0x7d, 0x3b,
    0x0a, 0x20, 0x20, 0x20, 0x20, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x28, 0x73,
    0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x63, 0x61, 0x73, 0x74, 0x3c, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x3e, 0x28,
    0x61, 0x72, 0x67, 0x63, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x28, 0x69, 0x6e,
    0x74, 0x20, 0x69, 0x20, 0x3d, 0x20, 0x31, 0x3b, 0x20, 0x69, 0x20, 0x3c, 0x20, 0x61, 0x72, 0x67, 0x63, 0x3b, 0x20,
    0x2b, 0x2b, 0x69, 0x29, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x61, 0x72, 0x67, 0x73,
    0x2e, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x28, 0x61, 0x72, 0x67, 0x76, 0x5b, 0x69, 0x5d, 0x29,
    0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6e, 0x76, 0x3a, 0x3a, 0x69,
    0x6e, 0x69, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x28, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20,
    0x61, 0x6c, 0x3a, 0x3a, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x28, 0x29, 0x3b,
    0x0a, 0x20, 0x20, 0x20, 0x20, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x3a, 0x3a, 0x69, 0x6e, 0x69, 0x74,
    0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x28, 0x7b, 0x7d, 0x29, 0x3b, 0x0a, 0x0a, 0x20, 0x20, 0x20, 0x20,
    0x65, 0x6e, 0x76, 0x3a, 0x3a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x28, 0x51,
    0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x2c, 0x20,
    0x6d, 0x61, 0x6b, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x28, 0x61, 0x72, 0x67, 0x73, 0x29, 0x29, 0x3b, 0x0a, 0x0a,
    0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x73, 0x74, 0x64, 0x3a, 0x3a, 0x73, 0x74, 0x72, 0x69,
    0x6e, 0x67, 0x20, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x20, 0x20, 0x20, 0x20, 0x3d, 0x20, 0x75, 0x74, 0x69,
    0x6c, 0x69, 0x74, 0x79, 0x3a, 0x3a, 0x65, 0x6e, 0x76, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x28, 0x45, 0x4e,
    0x56, 0x5f, 0x56, 0x41, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x50, 0x41, 0x54, 0x48, 0x53, 0x29, 0x3b, 0x0a, 0x20, 0x20,
    0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x61, 0x75, 0x74, 0x6f, 0x20, 0x61, 0x64, 0x64, 0x5f, 0x6d, 0x6f,
    0x64, 0x75, 0x6c, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x5b, 0x26, 0x5d, 0x28, 0x61, 0x75, 0x74, 0x6f, 0x20, 0x26, 0x70,
    0x61, 0x74, 0x68, 0x29, 0x20, 0x7b, 0x20, 0x56, 0x6d, 0x6f, 0x64, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2d, 0x3e, 0x63,
    0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x62, 0x61, 0x63, 0x6b,
    0x28, 0x6d, 0x61, 0x6b, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x28, 0x70, 0x61, 0x74, 0x68, 0x29, 0x29,
    0x3b, 0x20, 0x7d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x21, 0x61, 0x6c, 0x5f, 0x70, 0x61,
    0x74, 0x68, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20,
    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x61, 0x75, 0x74, 0x6f, 0x20, 0x70, 0x61, 0x74, 0x68, 0x73, 0x20, 0x3d,
    0x20, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x3a, 0x3a, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x28, 0x61, 0x6c, 0x5f,
    0x70, 0x61, 0x74, 0x68, 0x2c, 0x20, 0x27, 0x3a, 0x27, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
    0x20, 0x73, 0x74, 0x64, 0x3a, 0x3a, 0x66, 0x6f, 0x72, 0x5f, 0x65, 0x61, 0x63, 0x68, 0x28, 0x73, 0x74, 0x64, 0x3a,
    0x3a, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x28, 0x70, 0x61, 0x74, 0x68, 0x73, 0x29, 0x2c, 0x20, 0x73, 0x74, 0x64, 0x3a,
    0x3a, 0x65, 0x6e, 0x64, 0x28, 0x70, 0x61, 0x74, 0x68, 0x73, 0x29, 0x2c, 0x20, 0x61, 0x64, 0x64, 0x5f, 0x6d, 0x6f,
    0x64, 0x75, 0x6c, 0x65, 0x73, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x0a, 0x20, 0x20, 0x20, 0x20,
    0x56, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2d, 0x3e, 0x73, 0x65,
    0x74, 0x28, 0x22, 0x2d, 0x2d, 0x6d, 0x61, 0x69, 0x6e, 0x2d, 0x2d, 0x22, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20,
    0x56, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x20, 0x3d, 0x20, 0x75, 0x74, 0x69, 0x6c, 0x69,
    0x74, 0x79, 0x3a, 0x3a, 0x65, 0x6e, 0x76, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x28, 0x45, 0x4e, 0x56, 0x5f, 0x56, 0x41,
    0x52, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x29, 0x20, 0x3f, 0x20, 0x51, 0x6e, 0x69, 0x6c, 0x20, 0x3a,
    0x20, 0x51, 0x74, 0x3b, 0x0a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28,
    0x66, 0x73, 0x3a, 0x3a, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x28, 0x70, 0x72,
    0x65, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x29, 0x29, 0x0a, 0x20,
    0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x28, 0x61,
    0x75, 0x74, 0x6f, 0x20, 0x26, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x66, 0x73, 0x3a, 0x3a,
    0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x28,
    0x70, 0x72, 0x65, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x29, 0x29,
    0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
    0x20, 0x20, 0x20, 0x20, 0x6d, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x76, 0x61,
    0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x28, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x70, 0x61, 0x74, 0x68,
    0x28, 0x29, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x28, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20,
    0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x61, 0x75, 0x74,
    0x6f, 0x20, 0x61, 0x6c, 0x69, 0x73, 0x70, 0x72, 0x63, 0x20, 0x3d, 0x20, 0x66, 0x73, 0x3a, 0x3a, 0x70, 0x61, 0x74,
    0x68, 0x28, 0x6d, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x29,
    0x20, 0x2f, 0x20, 0x22, 0x2e, 0x61, 0x6c, 0x69, 0x73, 0x70, 0x72, 0x63, 0x22, 0x3b, 0x20, 0x20, 0x20, 0x20, 0x0a,
    0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x3a, 0x3a, 0x65, 0x6e,
    0x76, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x28, 0x45, 0x4e, 0x56, 0x5f, 0x56, 0x41, 0x52, 0x5f, 0x52, 0x43, 0x29, 0x29,
    0x20, 0x7b, 0x20, 0x61, 0x6c, 0x69, 0x73, 0x70, 0x72, 0x63, 0x20, 0x3d, 0x20, 0x66, 0x73, 0x3a, 0x3a, 0x70, 0x61,
    0x74, 0x68, 0x28, 0x6d, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
    0x29, 0x20, 0x2f, 0x20, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x3a, 0x3a, 0x65, 0x6e, 0x76, 0x5f, 0x73, 0x74,
    0x72, 0x69, 0x6e, 0x67, 0x28, 0x45, 0x4e, 0x56, 0x5f, 0x56, 0x41, 0x52, 0x5f, 0x52, 0x43, 0x29, 0x3b, 0x20, 0x7d,
    0x0a, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x66, 0x73, 0x3a, 0x3a, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x67,
    0x75, 0x6c, 0x61, 0x72, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x28, 0x61, 0x6c, 0x69, 0x73, 0x70, 0x72, 0x63, 0x29, 0x29,
    0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x6d, 0x5f, 0x65, 0x76,
    0x61, 0x6c, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x76, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x28, 0x61,
    0x6c, 0x69, 0x73, 0x70, 0x72, 0x63, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x0a, 0x20, 0x20, 0x20,
    0x20, 0x0a
};
unsigned int templ_cpp_len = 2719;


unsigned char templ_mod_cpp[] = {
    0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x22, 0x61, 0x6c, 0x69, 0x73, 0x70, 0x2f, 0x63, 0x6f, 0x6e,
    0x66, 0x69, 0x67, 0x2e, 0x68, 0x70, 0x70, 0x22, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x22,
    0x61, 0x6c, 0x69, 0x73, 0x70, 0x2f, 0x61, 0x6c, 0x69, 0x73, 0x70, 0x2f, 0x61, 0x6c, 0x69, 0x73, 0x70, 0x5f, 0x6d,
    0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x68, 0x70, 0x70, 0x22, 0x0a,
    0x0a, 0x41, 0x4c, 0x49, 0x53, 0x50, 0x5f, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x20, 0x61, 0x6c, 0x69, 0x73, 0x70,
    0x3a, 0x3a, 0x65, 0x6e, 0x76, 0x3a, 0x3a, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x74, 0x72, 0x20, 0x69, 0x6e,
    0x69, 0x74, 0x5f, 0x7b, 0x30, 0x7d, 0x28, 0x5b, 0x5b, 0x6d, 0x61, 0x79, 0x62, 0x65, 0x5f, 0x75, 0x6e, 0x75, 0x73,
    0x65, 0x64, 0x5d, 0x5d, 0x20, 0x61, 0x6c, 0x69, 0x73, 0x70, 0x3a, 0x3a, 0x65, 0x6e, 0x76, 0x3a, 0x3a, 0x45, 0x6e,
    0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2a, 0x20, 0x65, 0x6e, 0x76, 0x2c, 0x20, 0x5b, 0x5b, 0x6d,
    0x61, 0x79, 0x62, 0x65, 0x5f, 0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x5d, 0x5d, 0x20, 0x61, 0x6c, 0x69, 0x73, 0x70,
    0x3a, 0x3a, 0x65, 0x76, 0x61, 0x6c, 0x3a, 0x3a, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x2a, 0x20,
    0x65, 0x76, 0x61, 0x6c, 0x29, 0x0a, 0x7b, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x75, 0x73,
    0x69, 0x6e, 0x67, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x61, 0x6c, 0x69, 0x73, 0x70,
    0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x61, 0x75, 0x74, 0x6f, 0x20, 0x4d, 0x20, 0x3d, 0x20, 0x61, 0x6c, 0x69, 0x73,
    0x70, 0x3a, 0x3a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x28, 0x22, 0x7b, 0x30, 0x7d,
    0x22, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x61, 0x75, 0x74, 0x6f, 0x20, 0x6d, 0x5f, 0x70, 0x74, 0x72, 0x20,
    0x3d, 0x20, 0x4d, 0x2e, 0x67, 0x65, 0x74, 0x28, 0x29, 0x3b, 0x0a
};
unsigned int templ_mod_cpp_len = 315;


const char *staticMap(char c)
{
    switch (c)
    {
        case '\a': return "\\a";
        case '\b': return "\\b";
        case '\t': return "\\t";
        case '\n': return "\\n";
        case '\v': return "\\v";
        case '\f': return "\\f";
        case '\r': return "\\r";

        case '\"': return "\\\"";
        case '\'': return "\\\'";
        case '\?': return "\\\?";
        case '\\': return "\\\\";
    }
    return nullptr;
}

std::string escape_cpp(const std::string &input)
{
    std::stringstream ss;
    for (char c : input)
    {
        const char *str = staticMap(c);
        if (str) { ss << str; }
        else if (!isprint(static_cast<unsigned char>(c)))
        {
            ss << "\\u" << std::hex << std::setfill('0') << std::setw(4)
               << (static_cast<unsigned int>(static_cast<unsigned char>(c)));
        }
        else
        {
            ss << c;
        }
    }
    return ss.str();
}


auto dump_cpp(ALObjectPtr obj)
{


    switch (obj->type())
    {
        case ALObjectType::INT_VALUE: return fmt::format("make_int({})", obj->to_int()); break;

        case ALObjectType::REAL_VALUE: return fmt::format("make_real({})", obj->to_real()); break;

        case ALObjectType::STRING_VALUE: return fmt::format("make_string(\"{}\")", escape_cpp(obj->to_string())); break;

        case ALObjectType::SYMBOL: return fmt::format("make_symbol(\"{}\")", obj->to_string()); break;

        case ALObjectType::LIST:
            std::ostringstream str;
            if (obj->length() == 0)
            {
                str << "Qnil,"
                    << "\n";
                break;
            }

            str << "make_list(";
            for (auto ob : *obj)
            {
                str << dump_cpp(ob);
                str << ",";
            }
            str.seekp(-1, std::ios_base::end);
            str << ")";
            return str.str();
    }

    return std::string{};
}

auto dump_defun(ALObjectPtr obj)
{
    AL_CHECK(assert_min_size<3>(obj));
    AL_CHECK(assert_symbol(obj->i(1)));
    AL_CHECK(assert_list(obj->i(2)));

    std::ostringstream str;

    if (obj->size() >= 4 and pstring(obj->i(3)))
    {
        str << fmt::format("alisp::module_define_function(m_ptr,{}, {}, {}, \"{}\");",
                           dump_cpp(obj->i(1)),
                           dump_cpp(obj->i(2)),
                           dump_cpp(splice(obj, 4)),
                           obj->i(3)->to_string());
        return str.str();
    };

    str << fmt::format("alisp::module_define_function(m_ptr,{}, {}, {});",
                       dump_cpp(obj->i(1)),
                       dump_cpp(obj->i(2)),
                       dump_cpp(splice(obj, 3)));
    return str.str();
}

auto dump_macro(ALObjectPtr obj)
{
    AL_CHECK(assert_min_size<3>(obj));
    AL_CHECK(assert_symbol(obj->i(1)));
    AL_CHECK(assert_list(obj->i(2)));

    std::ostringstream str;

    if (obj->size() >= 4 and pstring(obj->i(3)))
    {
        str << fmt::format("alisp::module_define_function(m_ptr,{}, {}, {}, \"{}\");",
                           dump_cpp(obj->i(1)),
                           dump_cpp(obj->i(2)),
                           dump_cpp(splice(obj, 4)),
                           obj->i(3)->to_string());
        return str.str();
    };

    str << fmt::format("alisp::module_define_macro(m_ptr,{}, {}, {});",
                       dump_cpp(obj->i(1)),
                       dump_cpp(obj->i(2)),
                       dump_cpp(splice(obj, 3)));
    return str.str();
}

auto dump_var(ALObjectPtr obj)
{
    AL_CHECK(assert_min_size<3>(obj));
    AL_CHECK(assert_max_size<4>(obj));
    AL_CHECK(assert_symbol(obj->i(1)));

    std::ostringstream str;

    if (obj->size() >= 4 and pstring(obj->i(3)))
    {
        str << fmt::format("alisp::module_define_variable(m_ptr,{}, {}, \"{}\");",
                           dump_cpp(obj->i(1)),
                           dump_cpp(obj->i(2)),
                           obj->i(3)->to_string());
        return str.str();
    };

    str << fmt::format("alisp::module_define_variable(m_ptr,{}, {});", dump_cpp(obj->i(1)), dump_cpp(obj->i(2)));
    return str.str();
}


auto dump_cpp_module(ALObjectPtr obj)
{

    if (plist(obj))
    {
        std::ostringstream str;

        if (obj->length() == 0)
        {
            str << "Qnil,"
                << "\n";
            return str.str();
        }

        if (obj->i(0) == Qdefun)
        {
            str << dump_defun(obj);
            return str.str();
        }
        else if (obj->i(0) == Qdefvar)
        {
            str << dump_var(obj);
            return str.str();
        }
        else if (obj->i(0) == Qdefmacro)
        {
            str << dump_macro(obj);
            return str.str();
        }
    }
    return fmt::format("alisp::module_eval(m_ptr, {});", dump_cpp(obj));
}

struct CLIOptions
{
    std::string input{};
    std::string output{};

    bool com_module{ false };

    bool debug{ false };
    bool optimization{ false };

    bool verbose{ false };
    bool no_compile{ false };
    bool no_cleanup{ false };

    bool version{ false };
    bool show_help{ false };
};

int main(int argc, char *argv[])
{
    namespace fs = std::filesystem;

    CLIOptions opts;


    auto cli = (

      opts.version << clipp::option("-v", "--version") % "Show the version of the al cpp compiler",
      opts.verbose << clipp::option("-V", "--verbose") % "Print debug information",
      opts.no_compile << clipp::option("-c", "--no-compile") % "Do not compile and link the executable.",
      opts.no_cleanup << clipp::option("-n", "--no-cleanup") % "Do not delete temporary files.",
      opts.show_help << clipp::option("-h", "--help") % "Print help information.",
      opts.debug << clipp::option("-g", "--debug") % "Build the executable with debug symbols.",
      opts.optimization << clipp::option("-O", "--optimize") % "Enable optimizations when compiling.",
      opts.com_module << clipp::option("-m", "--module") % "Compile the file as a module that can be imported.",


      (clipp::option("-o", "--ouput") & opts.output << clipp::value("output")) % "Output executable file",

      opts.input << clipp::opt_value("file") % "Input alisp file"

    );

    const auto res = clipp::parse(argc, argv, cli);

    if (res.any_bad_repeat() or res.any_blocked() or res.any_conflict() or res.any_error()
        or res.unmapped_args_count() > 1)
    {
        std::cout << "Usage:\n" << clipp::usage_lines(cli, "alcpp") << "\n";
        return 1;
    }

    if (opts.show_help)
    {
        std::cout << clipp::make_man_page(cli, "alcpp")
                       .prepend_section("DESCRIPTION",
                                        "The alisp cpp compiler. It can transpile an alisp script into a cpp file and "
                                        "then copile it with gcc.")
                       .append_section("LICENSE", std::string("\t").append(AL_LICENSE));
        return 0;
    }

    if (opts.version)
    {
        std::cout << alisp::get_build_info();
        return 0;
    }


    if (!fs::is_regular_file(opts.input)) { return 0; }
    const std::string input_file = fs::absolute(opts.input);

    env::Environment env;
    parser::ALParser<alisp::env::Environment> parser{ env };

    auto file_content = utility::load_file(input_file);


    const auto obj_vec = [&]() {
        try
        {
            return parser.parse(file_content, "__COMPILE__");
        }
        catch (...)
        {
            handle_errors_lippincott<true>();
        }
        return std::vector<ALObjectPtr>{};
    }();

    auto contents = [&]() {
        if (opts.com_module)
        {

            const std::string module_name = fs::path(input_file).stem();
            std::stringstream ss;
            ss << fmt::format(std::string_view{ reinterpret_cast<char *>(templ_mod_cpp), templ_mod_cpp_len },
                              module_name)
               << "\n";

            for (auto &el : obj_vec) { ss << dump_cpp_module(el) << "\n"; }

            ss << "\n";
            ss << "return M;\n";
            ss << "}"
               << "\n";
            return ss.str();
        }
        else
        {

            std::stringstream ss;
            ss << std::string_view{ reinterpret_cast<char *>(templ_cpp), templ_cpp_len } << "\n";
            for (auto &el : obj_vec) { ss << fmt::format("    m_evaluator.eval({});", dump_cpp(el)); }
            ss << "\n";
            ss << "}"
               << "\n";

            return ss.str();
        }
    }();

    const std::string output_cpp_file = fs::absolute(opts.input).string() += ".cpp";

    std::ofstream outfile;
    outfile.open(output_cpp_file);
    outfile << contents;
    outfile.close();


    const std::string project_root{ AL_ROOT };

    std::stringstream compile_command;

    const std::vector<std::string> definitions = {
        "-DENABLE_LINE_TRACE", "-DENABLE_OBJECT_DOC",  "-DENABLE_STACK_TRACE",
        "-DLINK_MODULES",      "-DREADLINE_AVAILABLE", fmt::format("-DAL_PRELUDE_DIR=\\\"{}\\\"", AL_PRELUDE_DIR)
    };

    const std::vector<std::string> includes = {
        fmt::format("-I{}/build/src/include", project_root),
        fmt::format("-I{}/src/include", project_root),
        fmt::format("-I{}/libs/include", project_root),
        fmt::format("-I{}/src/applications/include", project_root),
        fmt::format("-I{}/src/applications/src", project_root),
        fmt::format("-I{}/src/utility/include", project_root),
        fmt::format("-I{}/src/alisp/include", project_root),
        fmt::format("-I{}/src/streams/include", project_root),
        fmt::format("-I{}/src/management/include", project_root),
        "-isystem "
        "/home/arnaud/.conan/data/fmt/6.0.0/bincrafters/stable/package/038baac88f4c7bfa972ce5adac1616bed8fe2ef4/include"
    };

    const std::vector<std::string> warnings = { "-Wall", " -Wextra", " -Wpedantic" };

    const std::vector<std::string> linking = { "-pthread" };


    std::string output_o_file = output_cpp_file + ".o";

    compile_command << "g++ ";
    compile_command << "-c " << output_cpp_file << " ";
    compile_command << "-o " << output_o_file << " ";

    if (opts.com_module) { compile_command << "-fPIC "; }


    for (auto &el : definitions) { compile_command << el << " "; }

    for (auto &el : includes) { compile_command << el << " "; }

    if (opts.optimization) { compile_command << "-O3 "; }

    if (opts.debug) { compile_command << "-g "; }

    compile_command << "-std=gnu++17 ";

    const std::vector<std::string> linking_libs = {
        "-Wl,-rpath,/home/arnaud/.conan/data/fmt/6.0.0/bincrafters/stable/package/"
        "038baac88f4c7bfa972ce5adac1616bed8fe2ef4/lib",
        "/home/arnaud/.conan/data/fmt/6.0.0/bincrafters/stable/package/038baac88f4c7bfa972ce5adac1616bed8fe2ef4/lib/"
        "libfmtd.a",
        fmt::format("{}/build/lib/libalisp_math.so", project_root),
        fmt::format("{}/build/lib/libalisp_fileio.so", project_root),
        fmt::format("{}/build/lib/libalisp_time.so", project_root),
        fmt::format("{}/build/lib/libalisp_system.so", project_root),
        fmt::format("{}/build/lib/libalisp_platform.so", project_root),
        fmt::format("{}/build/lib/libalisp_memory.so", project_root),
        fmt::format("{}/build/lib/libalisp_util.so", project_root),
        fmt::format("{}/build/lib/libalisp_language.so", project_root),
        fmt::format("{}/build/lib/libalisp_streams.so", project_root),
        fmt::format("{}/build/lib/libalisp_management.so", project_root),
        "-lreadline",
        "-lstdc++fs",
        "-pthread",
        "-ldl"
    };

    std::stringstream link_command;

    const std::string output_file = [&]() {
        if (!opts.output.empty()) { return opts.output; }
        else
        {
            auto stem = fs::path(input_file).stem().string();
            if (opts.com_module) { return stem + std::string{ ".so" }; }
            return stem;
        }
    }();

    link_command << "c++ ";
    link_command << output_o_file << " ";
    link_command << "-o " << output_file << " ";

    if (opts.com_module) { link_command << "-fPIC -shared "; }

    for (auto &el : linking_libs) { link_command << el << " "; }


    if (!opts.no_compile)
    {

        if (opts.verbose) { std::cout << compile_command.str() << "\n"; }
        system(compile_command.str().c_str());

        if (opts.verbose) { std::cout << link_command.str() << "\n"; }
        system(link_command.str().c_str());
    }

    if (!opts.no_cleanup)
    {
        if (opts.verbose) { std::cout << "Deleting: " << output_cpp_file << "\n"; }
        fs::remove(output_cpp_file);
        if (opts.verbose) { std::cout << "Deleting: " << output_o_file << "\n"; }
        fs::remove(output_o_file);
    }

    return 0;
}
